// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  customer
  organizer
}

enum EventStatus {
  active
  inactive
  cancelled
}

enum VoucherStatus {
  active
  inactive
  expired
}

enum CouponStatus {
  active
  used
  expired
}

enum TransactionStatus {
  waiting_payment
  waiting_confirmation
  done
  rejected
  expired
  cancelled
}

enum AttendeeStatus {
  registered
  attended
  no_show
}

enum PointTransactionType {
  earned
  used
  refunded
  expired
}

model User {
  id             Int      @id @default(autoincrement()) @map("user_id")
  email          String   @unique @db.VarChar(255)
  password       String   @db.VarChar(255)
  fullName       String   @map("full_name") @db.VarChar(255)
  phone          String?  @db.VarChar(20)
  role           UserRole @default(customer)
  profilePicture String?  @map("profile_picture") @db.VarChar(500)
  referralCode   String   @unique @map("referral_code") @db.VarChar(20)
  referredBy     Int?     @map("referred_by")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  referrer  User?  @relation("UserReferral", fields: [referredBy], references: [id])
  referrals User[] @relation("UserReferral")

  organizedEvents   Event[]
  transactions      Transaction[]
  reviews           Review[]
  points            Point[]
  coupons           Coupon[]
  attendees         Attendee[]
  pointTransactions PointTransaction[]

  @@map("users")
}

model Event {
  id             Int         @id @default(autoincrement()) @map("event_id")
  organizerId    Int         @map("organizer_id")
  eventName      String      @map("event_name") @db.VarChar(255)
  description    String?     @db.Text
  category       String?     @db.VarChar(100)
  location       String      @db.VarChar(255)
  price          Decimal     @default(0) @db.Decimal(12, 2)
  startDate      DateTime    @map("start_date")
  endDate        DateTime    @map("end_date")
  totalSeats     Int         @default(0) @map("total_seats")
  availableSeats Int         @default(0) @map("available_seats")
  imageUrl       String?     @map("image_url") @db.VarChar(500)
  status         EventStatus @default(active)
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  // Relationships
  organizer    User          @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  ticketTypes  TicketType[]
  vouchers     Voucher[]
  transactions Transaction[]
  reviews      Review[]
  attendees    Attendee[]

  @@index([organizerId])
  @@index([status])
  @@index([category])
  @@index([startDate])
  @@index([location])
  @@map("events")
}

model TicketType {
  id                Int      @id @default(autoincrement()) @map("ticket_type_id")
  eventId           Int      @map("event_id")
  typeName          String   @map("type_name") @db.VarChar(100)
  description       String?  @db.Text
  price             Decimal  @default(0) @db.Decimal(12, 2)
  quantity          Int      @default(0)
  availableQuantity Int      @default(0) @map("available_quantity")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relationships
  event              Event               @relation(fields: [eventId], references: [id], onDelete: Cascade)
  transactionDetails TransactionDetail[]

  @@index([eventId])
  @@map("ticket_types")
}

model Voucher {
  id                 Int           @id @default(autoincrement()) @map("voucher_id")
  eventId            Int           @map("event_id")
  voucherCode        String        @unique @map("voucher_code") @db.VarChar(50)
  discountAmount     Decimal?      @default(0) @map("discount_amount") @db.Decimal(12, 2)
  discountPercentage Decimal?      @default(0) @map("discount_percentage") @db.Decimal(5, 2)
  usageLimit         Int           @default(1) @map("usage_limit")
  usedCount          Int           @default(0) @map("used_count")
  validFrom          DateTime      @map("valid_from")
  validUntil         DateTime      @map("valid_until")
  status             VoucherStatus @default(active)
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  event               Event                @relation(fields: [eventId], references: [id], onDelete: Cascade)
  transactionVouchers TransactionVoucher[]

  @@index([eventId])
  @@index([voucherCode])
  @@index([status])
  @@map("vouchers")
}

model Coupon {
  id                 Int          @id @default(autoincrement()) @map("coupon_id")
  userId             Int          @map("user_id")
  couponCode         String       @unique @map("coupon_code") @db.VarChar(50)
  discountAmount     Decimal?     @default(0) @map("discount_amount") @db.Decimal(12, 2)
  discountPercentage Decimal?     @default(0) @map("discount_percentage") @db.Decimal(5, 2)
  validFrom          DateTime     @map("valid_from")
  validUntil         DateTime     @map("valid_until")
  status             CouponStatus @default(active)
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")

  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactionCoupons TransactionCoupon[]

  @@index([userId])
  @@index([couponCode])
  @@index([status])
  @@map("coupons")
}

model Point {
  id           Int      @id @default(autoincrement()) @map("point_id")
  userId       Int      @map("user_id")
  pointsEarned Int      @default(0) @map("points_earned")
  pointsUsed   Int      @default(0) @map("points_used")
  balance      Int      @default(0)
  description  String?  @db.Text
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("points")
}

model Transaction {
  id              Int               @id @default(autoincrement()) @map("transaction_id")
  userId          Int               @map("user_id")
  eventId         Int               @map("event_id")
  transactionCode String            @unique @map("transaction_code") @db.VarChar(50)
  quantity        Int               @default(1)
  subtotal        Decimal           @default(0) @db.Decimal(12, 2)
  discountAmount  Decimal           @default(0) @map("discount_amount") @db.Decimal(12, 2)
  pointsUsed      Int               @default(0) @map("points_used")
  finalAmount     Decimal           @default(0) @map("final_amount") @db.Decimal(12, 2)
  status          TransactionStatus @default(waiting_payment)
  paymentProof    String?           @map("payment_proof") @db.VarChar(500)
  paymentDeadline DateTime?         @map("payment_deadline")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")

  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  event               Event                @relation(fields: [eventId], references: [id], onDelete: Cascade)
  transactionDetails  TransactionDetail[]
  transactionVouchers TransactionVoucher[]
  transactionCoupons  TransactionCoupon[]
  attendees           Attendee[]
  pointTransactions   PointTransaction[]

  @@index([userId])
  @@index([eventId])
  @@index([status])
  @@index([transactionCode])
  @@index([paymentDeadline])
  @@map("transactions")
}

model TransactionDetail {
  id            Int      @id @default(autoincrement()) @map("transaction_detail_id")
  transactionId Int      @map("transaction_id")
  ticketTypeId  Int      @map("ticket_type_id")
  quantity      Int      @default(1)
  unitPrice     Decimal  @default(0) @map("unit_price") @db.Decimal(12, 2)
  totalPrice    Decimal  @default(0) @map("total_price") @db.Decimal(12, 2)
  createdAt     DateTime @default(now()) @map("created_at")

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  ticketType  TicketType  @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)

  @@index([transactionId])
  @@index([ticketTypeId])
  @@map("transaction_details")
}

model TransactionVoucher {
  id              Int      @id @default(autoincrement())
  transactionId   Int      @map("transaction_id")
  voucherId       Int      @map("voucher_id")
  discountApplied Decimal  @default(0) @map("discount_applied") @db.Decimal(12, 2)
  createdAt       DateTime @default(now()) @map("created_at")

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  voucher     Voucher     @relation(fields: [voucherId], references: [id], onDelete: Cascade)

  @@map("transaction_vouchers")
}

model TransactionCoupon {
  id              Int      @id @default(autoincrement())
  transactionId   Int      @map("transaction_id")
  couponId        Int      @map("coupon_id")
  discountApplied Decimal  @default(0) @map("discount_applied") @db.Decimal(12, 2)
  createdAt       DateTime @default(now()) @map("created_at")

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  coupon      Coupon      @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@map("transaction_coupons")
}

model Review {
  id        Int      @id @default(autoincrement()) @map("review_id")
  userId    Int      @map("user_id")
  eventId   Int      @map("event_id")
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId]) // One review per user per event
  @@index([userId])
  @@index([eventId])
  @@index([rating])
  @@map("reviews")
}

model Attendee {
  id            Int            @id @default(autoincrement()) @map("attendee_id")
  transactionId Int            @map("transaction_id")
  userId        Int            @map("user_id")
  eventId       Int            @map("event_id")
  attendedAt    DateTime?      @map("attended_at")
  status        AttendeeStatus @default(registered)
  createdAt     DateTime       @default(now()) @map("created_at")

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  event       Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventId])
  @@index([transactionId])
  @@map("attendees")
}

model PointTransaction {
  id            Int                  @id @default(autoincrement()) @map("point_transaction_id")
  userId        Int                  @map("user_id")
  transactionId Int?                 @map("transaction_id")
  pointsAmount  Int                  @map("points_amount")
  type          PointTransactionType
  description   String?              @db.Text
  createdAt     DateTime             @default(now()) @map("created_at")

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction Transaction? @relation(fields: [transactionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([type])
  @@map("point_transactions")
}
